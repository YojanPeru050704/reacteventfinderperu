{"ast":null,"code":"import { REGISTER_USER, GET_AUTH_USER, ERROR_USER, EXISTS_AUTH_USER, CLEAR_AUTH_USER, NEW_REGISTRATION_ACTION } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n//AUTH USER\nexport const authenticateUser = user => async dispatch => {\n  try {\n    console.log('uno');\n    console.log(user);\n    debugger;\n    const vemail = user.loginUserEmail;\n    const vpassword = user.loginUserPassword;\n    console.log(vpassword);\n    let resp = await fetch(\"http://localhost:5000/users?email=\" + vemail + \"&password=\" + vpassword);\n    let data = await resp.json();\n    if (data.length > 0) {\n      console.log(data[0].region);\n      let respregion = await fetch(\"http://localhost:5000/regions?id=\" + data[0].region);\n      let dataregion = await respregion.json();\n      if (dataregion.length > 0) {\n        const regionname = dataregion[0].regionname;\n        console.log(regionname);\n        data[0][\"regionname\"] = regionname;\n      }\n      dispatch({\n        type: GET_AUTH_USER,\n        payload: data[0]\n      });\n    } else {\n      resp = await fetch(\"http://localhost:5000/users?email=\" + vemail);\n      data = await resp.json();\n      if (data.length === 0) dispatch({\n        type: ERROR_USER,\n        payload: \"User does not exist\"\n      });else dispatch({\n        type: ERROR_USER,\n        payload: \"Password is not correct\"\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//REGISTER AN USER\nexport const existsUserEmail = useremail => async dispatch => {\n  let exists = \"0\";\n  try {\n    const resp = await fetch(\"http://localhost:5000/users?email=\" + useremail);\n    const data = await resp.json();\n    if (data.length > 0) exists = \"1\";\n    dispatch({\n      type: EXISTS_AUTH_USER,\n      payload: exists\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};\nexport const newRegistrationAction = () => async dispatch => {\n  dispatch({\n    type: NEW_REGISTRATION_ACTION\n  });\n};\nexport const clearauthuser = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_AUTH_USER\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//REGISTER AN USER\nexport const createUser = user => async dispatch => {\n  try {\n    debugger;\n    const resp = await fetch(\"http://localhost:5000/users\", {\n      method: 'POST',\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n    dispatch({\n      type: REGISTER_USER,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};","map":{"version":3,"names":["REGISTER_USER","GET_AUTH_USER","ERROR_USER","EXISTS_AUTH_USER","CLEAR_AUTH_USER","NEW_REGISTRATION_ACTION","setAuthToken","authenticateUser","user","dispatch","console","log","vemail","loginUserEmail","vpassword","loginUserPassword","resp","fetch","data","json","length","region","respregion","dataregion","regionname","type","payload","error","response","statusText","existsUserEmail","useremail","exists","newRegistrationAction","clearauthuser","createUser","method","body","JSON","stringify","headers"],"sources":["C:/Bitacora Cambios/REACT/Assessment/eventfinderapp/src/actions/authActions.js"],"sourcesContent":["import {  REGISTER_USER, GET_AUTH_USER , ERROR_USER, EXISTS_AUTH_USER, CLEAR_AUTH_USER, NEW_REGISTRATION_ACTION \r\n} from './types'\r\nimport setAuthToken from '../utils/setAuthToken'\r\n\r\n//AUTH USER\r\nexport const authenticateUser = (user)  => async dispatch => {\r\n\r\n    try{\r\n        console.log('uno');\r\n        console.log(user);\r\n        debugger;\r\n        \r\n        const vemail = user.loginUserEmail;\r\n        const vpassword =user.loginUserPassword;\r\n\r\n        \r\n        console.log(vpassword);\r\n\r\n        let resp = await fetch(\"http://localhost:5000/users?email=\" + vemail + \"&password=\" + vpassword);\r\n        let data = await resp.json();\r\n\r\n        if (data.length > 0){\r\n            console.log(data[0].region);    \r\n\r\n            let respregion = await fetch(\"http://localhost:5000/regions?id=\" + data[0].region);    \r\n            let dataregion = await respregion.json();\r\n\r\n            if (dataregion.length > 0){\r\n                const regionname = dataregion[0].regionname;\r\n                console.log(regionname);\r\n                data[0][\"regionname\"] = regionname; \r\n            }\r\n\r\n            \r\n\r\n            dispatch({\r\n                type:  GET_AUTH_USER, \r\n                payload: data[0]\r\n            })\r\n        }\r\n        else{\r\n            resp = await fetch(\"http://localhost:5000/users?email=\" + vemail);\r\n            data = await resp.json();\r\n\r\n            if (data.length === 0)\r\n            dispatch({\r\n                type:  ERROR_USER, \r\n                payload: \"User does not exist\"\r\n            }) \r\n            else\r\n            dispatch({\r\n                type:  ERROR_USER, \r\n                payload: \"Password is not correct\"\r\n            })\r\n        }\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//REGISTER AN USER\r\nexport const existsUserEmail = (useremail)  => async dispatch => {\r\n\r\n    let exists = \"0\";\r\n\r\n    try{\r\n        const resp = await fetch(\"http://localhost:5000/users?email=\" + useremail);\r\n        const data = await resp.json();\r\n        \r\n\r\n        if (data.length > 0)\r\n            exists = \"1\";\r\n           \r\n        dispatch({\r\n            type:  EXISTS_AUTH_USER, \r\n            payload: exists\r\n        })\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport const newRegistrationAction = ()  => async dispatch => {\r\n\r\n    dispatch({\r\n        type:  NEW_REGISTRATION_ACTION\r\n    }) \r\n\r\n}\r\n\r\n\r\nexport const clearauthuser = ()  => async dispatch => {\r\n\r\n    try{\r\n        \r\n        dispatch({\r\n            type:  CLEAR_AUTH_USER\r\n        })     \r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//REGISTER AN USER\r\nexport const createUser = (user)  => async dispatch => {\r\n\r\n    try{\r\n        debugger;\r\n\r\n        const resp = await fetch(\"http://localhost:5000/users\",\r\n            {\r\n               method:'POST',\r\n               body:JSON.stringify(user),\r\n               headers: {\r\n                'Content-Type': 'application/json'\r\n                }     \r\n            }                            \r\n        );\r\n\r\n        const data = await resp.json();\r\n\r\n        dispatch({\r\n            type:  REGISTER_USER, \r\n            payload: data\r\n        })     \r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}