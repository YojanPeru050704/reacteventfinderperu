{"ast":null,"code":"import { GET_EVENTS_PER_REGION, GET_EVENT, ADD_EVENT, DELETE_EVENT, UPDATE_EVENT, SEARCH_EVENTS, ERROR_EVENT, SET_CURRENT_EVENT, CLEAR_CURRENT_EVENT, SET_CURRENT_ACTION_TIME } from './types';\n\n//SEACH EVENTS PER REGION\nexport const searchEventsPerRegion = searchText => async dispatch => {\n  try {\n    const resp = await fetch(\"http://localhost:5000/events?title=\" + searchText);\n    const data = await resp.json();\n    dispatch({\n      type: SEARCH_EVENTS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//GET EVENTS PER REGION\nexport const getEventsPerRegion = () => async dispatch => {\n  try {\n    const resp = await fetch(\"http://localhost:5000/events\");\n    const data = await resp.json();\n    dispatch({\n      type: GET_EVENTS_PER_REGION,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\nexport const addEvent = event => async dispatch => {\n  try {\n    const resp = await fetch(\"http://localhost:5000/events\", {\n      method: 'POST',\n      body: JSON.stringify(event),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n    dispatch({\n      type: ADD_EVENT,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//updateEvent\nexport const updateEvent = event => async dispatch => {\n  try {\n    const res = await fetch(`http://localhost:5000/events/${event.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(event),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_EVENT,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//delete an event\nexport const deleteEvent = id => async dispatch => {\n  try {\n    await fetch(`http://localhost:5000/events/${id}`, {\n      method: 'DELETE'\n    });\n    dispatch({\n      type: DELETE_EVENT,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//set currentevent\nexport const clearCurrentEvent = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_EVENT\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//set currentevent\nexport const setCurrentEvent = event => async dispatch => {\n  try {\n    dispatch({\n      type: SET_CURRENT_EVENT,\n      payload: event\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//set currentactiontime\nexport const setCurrentActionTime = actionTime => async dispatch => {\n  try {\n    dispatch({\n      type: SET_CURRENT_ACTION_TIME,\n      payload: actionTime\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_EVENT,\n      payload: error.response.statusText\n    });\n  }\n};","map":{"version":3,"names":["GET_EVENTS_PER_REGION","GET_EVENT","ADD_EVENT","DELETE_EVENT","UPDATE_EVENT","SEARCH_EVENTS","ERROR_EVENT","SET_CURRENT_EVENT","CLEAR_CURRENT_EVENT","SET_CURRENT_ACTION_TIME","searchEventsPerRegion","searchText","dispatch","resp","fetch","data","json","type","payload","error","response","statusText","getEventsPerRegion","addEvent","event","method","body","JSON","stringify","headers","updateEvent","res","id","deleteEvent","clearCurrentEvent","setCurrentEvent","setCurrentActionTime","actionTime"],"sources":["C:/Bitacora Cambios/REACT/Assessment/eventfinderapp/src/actions/eventActions.js"],"sourcesContent":["import {    GET_EVENTS_PER_REGION, GET_EVENT, \r\n            ADD_EVENT, DELETE_EVENT,\r\n            UPDATE_EVENT,SEARCH_EVENTS,ERROR_EVENT,SET_CURRENT_EVENT, CLEAR_CURRENT_EVENT,\r\n            SET_CURRENT_ACTION_TIME\r\n       } from './types'\r\n\r\n//SEACH EVENTS PER REGION\r\nexport const searchEventsPerRegion = (searchText)  => async dispatch => {\r\n\r\n    try{\r\n\r\n        const resp = await fetch(\"http://localhost:5000/events?title=\" + searchText);\r\n\r\n        const data = await resp.json();\r\n\r\n        dispatch({\r\n            type:  SEARCH_EVENTS, \r\n            payload: data\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//GET EVENTS PER REGION\r\nexport const getEventsPerRegion = ()  => async dispatch => {\r\n\r\n    try{\r\n\r\n        const resp = await fetch(\"http://localhost:5000/events\");\r\n        const data = await resp.json();\r\n\r\n        dispatch({\r\n            type:  GET_EVENTS_PER_REGION, \r\n            payload: data\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const addEvent = (event)  => async dispatch => {\r\n\r\n    try{\r\n\r\n        const resp = await fetch(\"http://localhost:5000/events\",\r\n            {\r\n               method:'POST',\r\n               body:JSON.stringify(event),\r\n               headers: {\r\n                'Content-Type': 'application/json'\r\n                }     \r\n            }                            \r\n        );\r\n\r\n        const data = await resp.json();\r\n\r\n        dispatch({\r\n            type:  ADD_EVENT, \r\n            payload: data\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//updateEvent\r\nexport const updateEvent = (event)  => async dispatch => {\r\n\r\n    try{\r\n\r\n        const res = await fetch(`http://localhost:5000/events/${event.id}`,\r\n            {\r\n               method:'PUT',\r\n               body:JSON.stringify(event),\r\n               headers: {\r\n                'Content-Type': 'application/json'\r\n                }     \r\n            }                            \r\n        );\r\n\r\n        const data  = await res.json();\r\n\r\n        dispatch({\r\n            type:  UPDATE_EVENT, \r\n            payload: data\r\n        })\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//delete an event\r\nexport const deleteEvent = (id)  => async dispatch => {\r\n\r\n    try{\r\n\r\n        \r\n        await fetch(`http://localhost:5000/events/${id}`,\r\n            {\r\n               method:'DELETE'               \r\n            }                            \r\n        );\r\n\r\n        \r\n        dispatch({\r\n            type:  DELETE_EVENT, \r\n            payload: id\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//set currentevent\r\nexport const clearCurrentEvent = ()  => async dispatch => {\r\n\r\n    try{\r\n\r\n        dispatch({\r\n            type:  CLEAR_CURRENT_EVENT\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n//set currentevent\r\nexport const setCurrentEvent = (event)  => async dispatch => {\r\n\r\n    try{\r\n\r\n        dispatch({\r\n            type:  SET_CURRENT_EVENT, \r\n            payload: event\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//set currentactiontime\r\nexport const setCurrentActionTime = (actionTime)  => async dispatch => {\r\n\r\n    try{\r\n       \r\n\r\n        dispatch({\r\n            type:  SET_CURRENT_ACTION_TIME, \r\n            payload: actionTime\r\n        })\r\n\r\n\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_EVENT, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}