{"ast":null,"code":"import { REGISTER_USER, GET_AUTH_USER, ERROR_USER, EXISTS_AUTH_USER } from './types';\n\n//AUTH USER\nexport const authenticateUser = user => async dispatch => {\n  try {\n    console.log('uno');\n    console.log(user);\n    const vemail = user.loginUserEmail;\n    const vpassword = user.loginUserPassword;\n    console.log(vpassword);\n    let resp = await fetch(\"http://localhost:5000/users?username=\" + vemail + \"&password=\" + vpassword);\n    let data = await resp.json();\n    if (data.length > 0) {\n      dispatch({\n        type: GET_AUTH_USER,\n        payload: data[0]\n      });\n    } else {\n      resp = await fetch(\"http://localhost:5000/users?username=\" + vemail);\n      data = await resp.json();\n      if (data.length === 0) dispatch({\n        type: ERROR_USER,\n        payload: \"User does not exist\"\n      });else dispatch({\n        type: ERROR_USER,\n        payload: \"Password is not correct\"\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//REGISTER AN USER\nexport const existsUserEmail = useremail => async dispatch => {\n  let exists = \"0\";\n  try {\n    const resp = await fetch(\"http://localhost:5000/users?username=\" + useremail);\n    const data = await resp.json();\n    if (data.length > 0) exists = \"1\";\n    dispatch({\n      type: EXISTS_AUTH_USER,\n      payload: exists\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};\n\n//REGISTER AN USER\nexport const createUser = user => async dispatch => {\n  try {\n    debugger;\n    const resp = await fetch(\"http://localhost:5000/users\", {\n      method: 'POST',\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n    dispatch({\n      type: REGISTER_USER,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_USER,\n      payload: error.response.statusText\n    });\n  }\n};","map":{"version":3,"names":["REGISTER_USER","GET_AUTH_USER","ERROR_USER","EXISTS_AUTH_USER","authenticateUser","user","dispatch","console","log","vemail","loginUserEmail","vpassword","loginUserPassword","resp","fetch","data","json","length","type","payload","error","response","statusText","existsUserEmail","useremail","exists","createUser","method","body","JSON","stringify","headers"],"sources":["C:/Bitacora Cambios/REACT/Assessment/eventfinderapp/src/actions/authActions.js"],"sourcesContent":["import {  REGISTER_USER, GET_AUTH_USER , ERROR_USER, EXISTS_AUTH_USER\r\n} from './types'\r\n\r\n//AUTH USER\r\nexport const authenticateUser = (user)  => async dispatch => {\r\n\r\n    try{\r\n        console.log('uno');\r\n        console.log(user);\r\n        \r\n        const vemail = user.loginUserEmail;\r\n        const vpassword =user.loginUserPassword;\r\n\r\n        \r\n        console.log(vpassword);\r\n\r\n        let resp = await fetch(\"http://localhost:5000/users?username=\" + vemail + \"&password=\" + vpassword);\r\n        let data = await resp.json();\r\n\r\n        if (data.length > 0){\r\n            dispatch({\r\n                type:  GET_AUTH_USER, \r\n                payload: data[0]\r\n            })\r\n        }\r\n        else{\r\n            resp = await fetch(\"http://localhost:5000/users?username=\" + vemail);\r\n            data = await resp.json();\r\n\r\n            if (data.length === 0)\r\n            dispatch({\r\n                type:  ERROR_USER, \r\n                payload: \"User does not exist\"\r\n            }) \r\n            else\r\n            dispatch({\r\n                type:  ERROR_USER, \r\n                payload: \"Password is not correct\"\r\n            })\r\n        }\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//REGISTER AN USER\r\nexport const existsUserEmail = (useremail)  => async dispatch => {\r\n\r\n    let exists = \"0\";\r\n\r\n    try{\r\n        const resp = await fetch(\"http://localhost:5000/users?username=\" + useremail);\r\n        const data = await resp.json();\r\n        \r\n\r\n        if (data.length > 0)\r\n            exists = \"1\";\r\n           \r\n        dispatch({\r\n            type:  EXISTS_AUTH_USER, \r\n            payload: exists\r\n        })\r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n//REGISTER AN USER\r\nexport const createUser = (user)  => async dispatch => {\r\n\r\n    try{\r\n        debugger;\r\n\r\n        const resp = await fetch(\"http://localhost:5000/users\",\r\n            {\r\n               method:'POST',\r\n               body:JSON.stringify(user),\r\n               headers: {\r\n                'Content-Type': 'application/json'\r\n                }     \r\n            }                            \r\n        );\r\n\r\n        const data = await resp.json();\r\n\r\n        dispatch({\r\n            type:  REGISTER_USER, \r\n            payload: data\r\n        })     \r\n    } \r\n    catch(error)\r\n    {\r\n        dispatch({\r\n            type:  ERROR_USER, \r\n            payload: error.response.statusText\r\n        })\r\n    }\r\n\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}