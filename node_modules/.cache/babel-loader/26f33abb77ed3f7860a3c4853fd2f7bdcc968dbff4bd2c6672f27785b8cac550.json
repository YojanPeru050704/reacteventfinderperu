{"ast":null,"code":"import { GET_EVENTS_PER_REGION, GET_EVENT, ADD_EVENT, DELETE_EVENT, UPDATE_EVENT, SEARCH_EVENTS, ERROR_EVENT, SET_CURRENT_EVENT, CLEAR_CURRENT_EVENT, SET_CURRENT_ACTION_TIME } from '../actions/types';\nconst initialstate = {\n  events: null,\n  current: null,\n  loading: false,\n  error: null,\n  actionTime: null\n};\nexport default (function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_EVENTS_PER_REGION:\n      return {\n        ...state,\n        events: action.payload,\n        loading: false\n      };\n    case ADD_EVENT:\n      return {\n        events: [...state.events, action.payload],\n        loading: false\n      };\n    case DELETE_EVENT:\n      return {\n        events: state.events.filter(event => event.id !== action.payload),\n        loading: false\n      };\n    case UPDATE_EVENT:\n      return {\n        ...state,\n        events: state.events.map(event => event.id == action.payload.id ? action.payload : event),\n        loading: false\n      };\n    case SET_CURRENT_EVENT:\n      return {\n        ...state,\n        current: action.payload,\n        actionTime: 1,\n        loading: false\n      };\n    case CLEAR_CURRENT_EVENT:\n      return {\n        ...state,\n        current: null,\n        loading: false\n      };\n    case SET_CURRENT_ACTION_TIME:\n      return {\n        ...state,\n        actionTime: action.payload\n      };\n    default:\n      return state;\n  }\n});","map":{"version":3,"names":["GET_EVENTS_PER_REGION","GET_EVENT","ADD_EVENT","DELETE_EVENT","UPDATE_EVENT","SEARCH_EVENTS","ERROR_EVENT","SET_CURRENT_EVENT","CLEAR_CURRENT_EVENT","SET_CURRENT_ACTION_TIME","initialstate","events","current","loading","error","actionTime","state","action","type","payload","filter","event","id","map"],"sources":["C:/Bitacora Cambios/REACT/Assessment/eventfinderapp/src/reducers/eventReducer.js"],"sourcesContent":["import {    GET_EVENTS_PER_REGION, GET_EVENT, \r\n            ADD_EVENT, DELETE_EVENT,\r\n            UPDATE_EVENT,SEARCH_EVENTS,ERROR_EVENT, SET_CURRENT_EVENT, CLEAR_CURRENT_EVENT,\r\n            SET_CURRENT_ACTION_TIME\r\n} from '../actions/types'\r\n\r\nconst initialstate ={\r\n    events: null,\r\n    current:null,\r\n    loading:false,\r\n    error:null,\r\n    actionTime:null\r\n}\r\n\r\n\r\nexport default (state = initialstate, action) => {\r\n\r\n    switch(action.type){\r\n        case GET_EVENTS_PER_REGION:\r\n            return {\r\n               ...state,\r\n               events: action.payload,\r\n               loading:false     \r\n            }\r\n        case ADD_EVENT:\r\n            return {\r\n                events: [...state.events,action.payload],\r\n                loading:false        \r\n            }   \r\n        case DELETE_EVENT:\r\n            return {\r\n                events: state.events.filter(event => event.id !== action.payload),\r\n                loading:false        \r\n            }  \r\n        case UPDATE_EVENT:\r\n            return {\r\n                ...state,   \r\n                events: state.events.map(event => event.id == action.payload.id ? action.payload : event),                  \r\n                loading:false\r\n            }                \r\n        case SET_CURRENT_EVENT:\r\n            return {\r\n                ...state,                \r\n                current: action.payload,  \r\n                actionTime: 1, \r\n                loading:false        \r\n            }        \r\n         case CLEAR_CURRENT_EVENT:\r\n                return {\r\n                    ...state,                    \r\n                    current: null,   \r\n                    loading:false        \r\n                }  \r\n        case SET_CURRENT_ACTION_TIME:\r\n                return {\r\n                    ...state,\r\n                    actionTime: action.payload \r\n                }              \r\n        default:\r\n              return state;  \r\n    }\r\n\r\n}"],"mappings":"AAAA,SAAYA,qBAAqB,EAAEC,SAAS,EAChCC,SAAS,EAAEC,YAAY,EACvBC,YAAY,EAACC,aAAa,EAACC,WAAW,EAAEC,iBAAiB,EAAEC,mBAAmB,EAC9EC,uBAAuB,QAC5B,kBAAkB;AAEzB,MAAMC,YAAY,GAAE;EAChBC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAC,IAAI;EACZC,OAAO,EAAC,KAAK;EACbC,KAAK,EAAC,IAAI;EACVC,UAAU,EAAC;AACf,CAAC;AAGD,gBAAe,YAAkC;EAAA,IAAjCC,KAAK,uEAAGN,YAAY;EAAA,IAAEO,MAAM;EAExC,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKlB,qBAAqB;MACtB,OAAO;QACJ,GAAGgB,KAAK;QACRL,MAAM,EAAEM,MAAM,CAACE,OAAO;QACtBN,OAAO,EAAC;MACX,CAAC;IACL,KAAKX,SAAS;MACV,OAAO;QACHS,MAAM,EAAE,CAAC,GAAGK,KAAK,CAACL,MAAM,EAACM,MAAM,CAACE,OAAO,CAAC;QACxCN,OAAO,EAAC;MACZ,CAAC;IACL,KAAKV,YAAY;MACb,OAAO;QACHQ,MAAM,EAAEK,KAAK,CAACL,MAAM,CAACS,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAAC;QACjEN,OAAO,EAAC;MACZ,CAAC;IACL,KAAKT,YAAY;MACb,OAAO;QACH,GAAGY,KAAK;QACRL,MAAM,EAAEK,KAAK,CAACL,MAAM,CAACY,GAAG,CAACF,KAAK,IAAIA,KAAK,CAACC,EAAE,IAAIL,MAAM,CAACE,OAAO,CAACG,EAAE,GAAGL,MAAM,CAACE,OAAO,GAAGE,KAAK,CAAC;QACzFR,OAAO,EAAC;MACZ,CAAC;IACL,KAAKN,iBAAiB;MAClB,OAAO;QACH,GAAGS,KAAK;QACRJ,OAAO,EAAEK,MAAM,CAACE,OAAO;QACvBJ,UAAU,EAAE,CAAC;QACbF,OAAO,EAAC;MACZ,CAAC;IACJ,KAAKL,mBAAmB;MACjB,OAAO;QACH,GAAGQ,KAAK;QACRJ,OAAO,EAAE,IAAI;QACbC,OAAO,EAAC;MACZ,CAAC;IACT,KAAKJ,uBAAuB;MACpB,OAAO;QACH,GAAGO,KAAK;QACRD,UAAU,EAAEE,MAAM,CAACE;MACvB,CAAC;IACT;MACM,OAAOH,KAAK;EAAC;AAG3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}